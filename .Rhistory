body <- glue::glue_collapse(readLines(html_path), sep = "\n")
body
length(body)
meta <- rmarkdown::yaml_front_matter(path)
meta
wp_handle_categories <- function (categories, wordpress_url)
{
if (is.null(categories)) {
return(NULL)
}
purrr::map_chr(categories, wp_get_taxo_id, taxo = "categories",
wordpress_url = wordpress_url)
}
wp_get_taxo_id <- function (term, taxo, wordpress_url)
{
api_url <- httr::modify_url(wordpress_url, path = paste0("/wp-json/wp/v2/",
taxo), query = list(per_page = 100, search = term))
online_terms <- wp_call_api(VERB = "GET", api_url = api_url)
online_terms_df <- data.frame(id = purrr::map_chr(online_terms,
"id"), name = purrr::map_chr(online_terms, "name"),
stringsAsFactors = FALSE)
if (!term %in% online_terms_df$name) {
new_term <- wp_call_api(VERB = "POST", api_url = httr::modify_url(wordpress_url,
path = paste0("/wp-json/wp/v2/", taxo), query = list(name = term)))
online_terms_df <- rbind(online_terms_df, data.frame(id = new_term$id,
name = new_term$name, stringsAsFactors = FALSE))
}
as.character(online_terms_df$id[online_terms_df$name ==
term])
}
wp_call_api <- function (VERB, api_url, body = NULL, filename = NULL)
{
token <- paste("Basic", jsonlite::base64_enc(glue::glue("{Sys.getenv(\"WP_USER\")}:{Sys.getenv(\"WP_PWD\")}")))
if (methods::is(body, "form_file")) {
api_response <- httr::VERB(verb = VERB, url = api_url,
httr::add_headers(Authorization = token, `Content-Disposition` = paste0("form-data; filename=\"",
filename, "\"")), body = body)
}
else {
api_response <- httr::VERB(verb = VERB, url = api_url,
httr::add_headers(Authorization = token, `Content-Type` = "application/json"),
body = body)
}
httr::stop_for_status(api_response)
httr::content(api_response)
}
categories <- wp_handle_categories(meta$categories, wordpress_url)
categories
meta$categories
modify_url(wordpress_url, path = paste0("/wp-json/wp/v2/",
"categories"), query = list(per_page = 100, search = "Marketing Analytics"))
library(httr)
modify_url(wordpress_url, path = paste0("/wp-json/wp/v2/",
"categories"), query = list(per_page = 100, search = "Marketing Analytics"))
glue::glue("{Sys.getenv(\"WP_USER\")}:{Sys.getenv(\"WP_PWD\")}"))
glue::glue("{Sys.getenv(\"WP_USER\")}:{Sys.getenv(\"WP_PWD\")}")
token <- paste("Basic", jsonlite::base64_enc(glue::glue("{Sys.getenv(\"WP_USER\")}:{Sys.getenv(\"WP_PWD\")}")))
token
?VERB
api_url
api_url <- httr::modify_url(wordpress_url, path = paste0("/wp-json/wp/v2/",
taxo), query = list(per_page = 100, search = term))
categories
library(usethis)
?wp_handle_tags
??wp_handle_tags
meta$tags
wp_handle_tags <- function(tags, wordpress_url) {
if (is.null(tags)) {
return(NULL)
}
purrr::map_chr(
tags,
wp_get_taxo_id,
taxo = "tags",
wordpress_url =
wordpress_url)
}
wp_handle_tags <- function(tags, wordpress_url) {
if (is.null(tags)) {
return(NULL)
}
purrr::map_chr(
tags,
wp_get_taxo_id,
taxo = "tags",
wordpress_url =
wordpress_url)
}
tags <- wp_handle_tags(meta$tags, wordpress_url)
tags
wp_handle_author <- function(author, wordpress_url) {
if (is.null(author)) {
return(NULL)
}
# list existing authors
online_authors <- wp_call_api(
VERB = "GET",
api_url = paste0(wordpress_url, "/wp-json/wp/v2/users")
)
online_authors_df <- data.frame(
id = purrr::map_chr(online_authors, "id"),
name = purrr::map_chr(online_authors, "name"),
stringsAsFactors = FALSE
)
if (!author %in% online_authors_df$name) {
stop(paste(author, "is not an existing user name."))
}
online_authors_df$id[online_authors_df$name == author]
}
meta$author
author <- wp_handle_author(meta$author, wordpress_url)
author
post_list <- list(date = meta$date, title = meta$title,
slug = meta$slug %||% NULL, comment_status = meta$comment_status %||%
"closed", ping_status = meta$ping_status %||% "closed",
status = "draft", content = body, excerpt = meta$excerpt %||%
NULL, format = "standard", template = meta$template %||%
NULL, categories = categories, tags = tags)
post_list
post_list %>% listviewer::jsonedit()
?`%||%`
1 %||% 2
NULL %||% 2
if (!is.null(author)) {
post_list$author <- author
}
post_list %>% listviewer::jsonedit()
post <- jsonlite::toJSON(post_list, auto_unbox = TRUE)
post
post %>% listviewer::jsonedit()
.wp_post <- function(post, post_id = NULL,
wordpress_url) {
if (is.null(post_id)) {
api_url <- paste0(wordpress_url, "/wp-json/wp/v2/posts")
} else{
api_url <- paste0(wordpress_url, "/wp-json/wp/v2/posts/", post_id)
}
wp_call_api(
VERB = "POST",
api_url = api_url,
body = post
)
}
if (!file.exists(wordpress_meta_path)) {
post_post <- .wp_post(post, post_id = NULL, wordpress_url)
}
post_post
wordpress_meta_path
post_post <- .wp_post(post, post_id = wordpress_meta$id,
wordpress_url)
wordpress_meta <- yaml::read_yaml(wordpress_meta_path)
post_post <- .wp_post(post, post_id = wordpress_meta$id,
wordpress_url)
post_post
post_post %>% listviewer::jsonedit()
.wp_media_post <- function(post, post_folder, post_id,
wordpress_url) {
# delete all existing image media
api_url <- paste0(wordpress_url, "/wp-json/wp/v2/media?parent=", post_id)
media <- wp_call_api(VERB = "GET", api_url = api_url)
if (length(media) > 0) {
media_ids <- purrr::map_chr(media, "id")[purrr::map_chr(media, "media_type") == "image"]
purrr::walk(media_ids, wp_delete_media,
wordpress_url)
}
figs <- dir(file.path(post_folder, "figs"),
full.names = TRUE)
if (length(figs)) {
fig_urls <- purrr::map_chr(
figs, wp_upload_media,
wordpress_url = wordpress_url,
post_id = post_id)
return(tibble::tibble(fig = basename(figs), url = fig_urls))
} else {
return(NULL)
}
}
post
figs <- dir(file.path(post_folder, "figs"),
full.names = TRUE)
figs
basename(figs)
dirname(figs)
wordpress_meta$id
media <- .wp_media_post(post, post_folder = post_folder,
post_id = post_post$id, wordpress_url)
wp_upload_media <- function(media_path, wordpress_url, post_id) {
image <- httr::upload_file(media_path)
img <- wp_call_api(VERB = "POST",
api_url =
paste0(wordpress_url, "/wp-json/wp/v2/media?post=", post_id),
body = image,
filename = basename(media_path))
return(img$media_details$sizes$full$source_url)
}
wp_delete_media <- function(media_id, wordpress_url) {
wp_call_api(VERB = "DELETE", api_url =
paste0(wordpress_url, "/wp-json/wp/v2/media/", media_id, "?force=true"))
}
media <- .wp_media_post(post, post_folder = post_folder,
post_id = post_post$id, wordpress_url)
media
View(media)
length(media)
media2 <- media
media2$fig <- NULL
media2$url <- NULL
media2
length(media2)
xml2::read_html(post_list$content)
content <- xml2::read_html(post_list$content)
imgs <- xml2::xml_find_all(content, "//img")
imgs
for (i in seq_along(media)) {
this_img <- imgs[xml2::xml_attr(imgs, "src") ==
paste0("figs/", media$fig[i])]
xml2::xml_attr(this_img, "src") <- media$url[i]
}
content
View(content)
listviewer::jsonedit(content)
content$doc
content$node
post_list$content <- as.character(xml2::xml_child(content))
post_list
post_list %>% listviewer::jsonedit()
post_list$content
this_img
library(goodpress)
post_folder <- "20201025"
wordpress_url <- "https://henrywang.nl"
wp_post(post_folder, wordpress_url)
content
post_folder <- "20201025"
wordpress_url <- "https://henrywang.nl"
path <- file.path(post_folder, "index.md")
wordpress_meta_path <- file.path(post_folder, ".wordpress.yml")
html_path <- tempfile(fileext = ".html")
file.create(html_path)
withr::with_dir(post_folder, rmarkdown::pandoc_convert("index.md",
to = "html", output = html_path, wd = getwd(), options = "--mathjax"))
body <- glue::glue_collapse(readLines(html_path), sep = "\n")
file.remove(html_path)
meta <- rmarkdown::yaml_front_matter(path)
wp_handle_categories <- function (categories, wordpress_url)
{
if (is.null(categories)) {
return(NULL)
}
purrr::map_chr(categories, wp_get_taxo_id, taxo = "categories",
wordpress_url = wordpress_url)
}
wp_get_taxo_id <- function (term, taxo, wordpress_url)
{
api_url <- httr::modify_url(wordpress_url, path = paste0("/wp-json/wp/v2/",
taxo), query = list(per_page = 100, search = term))
online_terms <- wp_call_api(VERB = "GET", api_url = api_url)
online_terms_df <- data.frame(id = purrr::map_chr(online_terms,
"id"), name = purrr::map_chr(online_terms, "name"),
stringsAsFactors = FALSE)
if (!term %in% online_terms_df$name) {
new_term <- wp_call_api(VERB = "POST", api_url = httr::modify_url(wordpress_url,
path = paste0("/wp-json/wp/v2/", taxo), query = list(name = term)))
online_terms_df <- rbind(online_terms_df, data.frame(id = new_term$id,
name = new_term$name, stringsAsFactors = FALSE))
}
as.character(online_terms_df$id[online_terms_df$name ==
term])
}
wp_call_api <- function (VERB, api_url, body = NULL, filename = NULL)
{
token <- paste("Basic", jsonlite::base64_enc(glue::glue("{Sys.getenv(\"WP_USER\")}:{Sys.getenv(\"WP_PWD\")}")))
if (methods::is(body, "form_file")) {
api_response <- httr::VERB(verb = VERB, url = api_url,
httr::add_headers(Authorization = token, `Content-Disposition` = paste0("form-data; filename=\"",
filename, "\"")), body = body)
}
else {
api_response <- httr::VERB(verb = VERB, url = api_url,
httr::add_headers(Authorization = token, `Content-Type` = "application/json"),
body = body)
}
httr::stop_for_status(api_response)
httr::content(api_response)
}
wp_handle_tags <- function(tags, wordpress_url) {
if (is.null(tags)) {
return(NULL)
}
purrr::map_chr(
tags,
wp_get_taxo_id,
taxo = "tags",
wordpress_url =
wordpress_url)
}
wp_handle_author <- function(author, wordpress_url) {
if (is.null(author)) {
return(NULL)
}
# list existing authors
online_authors <- wp_call_api(
VERB = "GET",
api_url = paste0(wordpress_url, "/wp-json/wp/v2/users")
)
online_authors_df <- data.frame(
id = purrr::map_chr(online_authors, "id"),
name = purrr::map_chr(online_authors, "name"),
stringsAsFactors = FALSE
)
if (!author %in% online_authors_df$name) {
stop(paste(author, "is not an existing user name."))
}
online_authors_df$id[online_authors_df$name == author]
}
.wp_post <- function(post, post_id = NULL,
wordpress_url) {
if (is.null(post_id)) {
api_url <- paste0(wordpress_url, "/wp-json/wp/v2/posts")
} else{
api_url <- paste0(wordpress_url, "/wp-json/wp/v2/posts/", post_id)
}
wp_call_api(
VERB = "POST",
api_url = api_url,
body = post
)
}
.wp_media_post <- function(post, post_folder, post_id,
wordpress_url) {
# delete all existing image media
api_url <- paste0(wordpress_url, "/wp-json/wp/v2/media?parent=", post_id)
media <- wp_call_api(VERB = "GET", api_url = api_url)
if (length(media) > 0) {
media_ids <- purrr::map_chr(media, "id")[purrr::map_chr(media, "media_type") == "image"]
purrr::walk(media_ids, wp_delete_media,
wordpress_url)
}
figs <- dir(file.path(post_folder, "figs"),
full.names = TRUE)
if (length(figs)) {
fig_urls <- purrr::map_chr(
figs, wp_upload_media,
wordpress_url = wordpress_url,
post_id = post_id)
return(tibble::tibble(fig = basename(figs), url = fig_urls))
} else {
return(NULL)
}
}
wp_delete_media <- function(media_id, wordpress_url) {
wp_call_api(VERB = "DELETE", api_url =
paste0(wordpress_url, "/wp-json/wp/v2/media/", media_id, "?force=true"))
}
wp_upload_media <- function(media_path, wordpress_url, post_id) {
image <- httr::upload_file(media_path)
img <- wp_call_api(VERB = "POST",
api_url =
paste0(wordpress_url, "/wp-json/wp/v2/media?post=", post_id),
body = image,
filename = basename(media_path))
return(img$media_details$sizes$full$source_url)
}
meta <- rmarkdown::yaml_front_matter(path)
categories <- wp_handle_categories(meta$categories, wordpress_url)
tags <- wp_handle_tags(meta$tags, wordpress_url)
author <- wp_handle_author(meta$author, wordpress_url)
post_list <- list(date = meta$date, title = meta$title,
slug = meta$slug %||% NULL, comment_status = meta$comment_status %||%
"closed", ping_status = meta$ping_status %||% "closed",
status = "draft", content = body, excerpt = meta$excerpt %||%
NULL, format = "standard", template = meta$template %||%
NULL, categories = categories, tags = tags)
?`%||%`
library(purrr)
post_list <- list(date = meta$date, title = meta$title,
slug = meta$slug %||% NULL, comment_status = meta$comment_status %||%
"closed", ping_status = meta$ping_status %||% "closed",
status = "draft", content = body, excerpt = meta$excerpt %||%
NULL, format = "standard", template = meta$template %||%
NULL, categories = categories, tags = tags)
post_list
if (!is.null(author)) {
post_list$author <- author
}
media <- tibble::tribble(
~ fig, ~ url,
"console.png", "https://henrywang.nl/wp-content/uploads/2020/10/console.png",
"ggplot2themes.png", "https://henrywang.nl/wp-content/uploads/2020/10/ggplot2themes.png",
"google-search-console-data-analysis-r-1.png", "https://henrywang.nl/wp-content/uploads/2020/10/google-search-console-data-analysis-r-1.png"
)
media
post_list %>% listviewer::jsonedit()
post_list$content %>% class()
content <- xml2::read_html(post_list$content)
content
xml2::xml_find_all(content, "//img")
class(content)
install.packages("htmltidy")
library(htmltidy)
xml_tree_view(content)
xml_tree_view(content)
html_tree_view(content)
xml_tree_view(content)
imgs <- xml2::xml_find_all(content, "//img")
imgs
media
seq_along(media)
media
seq_along(media)
length(media)
nrow(NULL)
if (nrow(NULL)) {x <- 1}
if (!is.null(NULL)) {x <- 1}
imgs
this_img <- imgs[xml2::xml_attr(imgs, "src") ==
paste0("figs/", media$fig[1])]
this_img
xml2::xml_attr(this_img, "src") <- media$url[1]
this_img
imgs
xml2::xml_child(content)
content
content
xml_child(content)
xml2::xml_child(content)
post_list$content <- as.character(xml2::xml_child(content))
as.character(xml2::xml_child(content))
post_folder <- "20200625"
wordpress_url <- "https://henrywang.nl"
wp_post(post_folder, wordpress_url)
remotes::install_github("maelle/goodpress", ref = "main")
library(goodpress)
post_folder <- "20201025"
wordpress_url <- "https://henrywang.nl"
wp_post(post_folder, wordpress_url)
post_folder <- "20200625"
wordpress_url <- "https://henrywang.nl"
wp_post(post_folder, wordpress_url)
library(goodpress)
post_folder <- "20201025"
wordpress_url <- "https://henrywang.nl"
wp_post(post_folder, wordpress_url)
post_folder <- "20200625"
wordpress_url <- "https://henrywang.nl"
wp_post(post_folder, wordpress_url)
library(goodpress)
post_folder <- "20201026"
wordpress_url <- "https://henrywang.nl"
wp_post(post_folder, wordpress_url)
library(goodpress)
library(goodpress)
post_folder <- "20201025"
wordpress_url <- "https://henrywang.nl"
wp_post(post_folder, wordpress_url)
library(goodpress)
post_folder <- "20201025"
wordpress_url <- "https://henrywang.nl"
library(goodpress)
post_folder <- "20201025"
wordpress_url <- "https://henrywang.nl"
library(goodpress)
post_folder <- "20201025"
wordpress_url <- "https://henrywang.nl"
library(goodpress)
post_folder <- "20201025"
wordpress_url <- "https://henrywang.nl"
wp_post(post_folder, wordpress_url)
library(goodpress)
post_folder <- "20201025"
wordpress_url <- "https://henrywang.nl"
wp_post(post_folder, wordpress_url)
wp_post(post_folder, wordpress_url)
library(goodpress)
post_folder <- "20201026"
wordpress_url <- "https://henrywang.nl"
library(goodpress)
post_folder <- "20201026"
wordpress_url <- "https://henrywang.nl"
wp_post(post_folder, wordpress_url)
wp_post(post_folder, wordpress_url)
install.packages("blogdown")
install.packages("blogdown")
library(blogdown)
blogdown:::update_meta_addin()
blogdown:::insert_image_addin()
blogdown:::update_meta_addin()
blogdown:::new_post_addin()
library(goodpress)
read_more()
library(goodpress)
read_more()
library(goodpress)
read_more()
library(goodpress)
read_more()
read_more()
library(goodpress)
read_more()
library(goodpress)
read_more()
install.packages("vembedr")
library(vembedr)
library(goodpress)
post_folder <- "test"
wordpress_url <- "https://henrywang.nl"
wp_post(post_folder, wordpress_url)
embed_url("https://www.youtube.com/watch?v=_fZQQ7o16yQ") %>%
use_start_time("1m32") %>%
use_align("center")
wp_post(post_folder, wordpress_url)
